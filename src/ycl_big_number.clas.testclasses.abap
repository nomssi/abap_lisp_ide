*"* use this source file for your ABAP unit test classes

CLASS ltc_bigint DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
PUBLIC SECTION.
  INTERFACES lif_unit_test.
PRIVATE SECTION.
  CONSTANTS:
    val1 TYPE string VALUE '6584389034291301828999',
    val2 TYPE string VALUE '533335555511111'.

  DATA mo_int1 TYPE REF TO lcl_lisp_bigintx.
  DATA mo_int2 TYPE REF TO lcl_lisp_bigintx.
  DATA mv_2_pow_1000 TYPE string.

  METHODS setup.
  METHODS teardown.
  METHODS from_string1 FOR TESTING.
  METHODS from_string2 FOR TESTING.
  METHODS from_float1 FOR TESTING.
  METHODS from_float2 FOR TESTING.
  METHODS add1 FOR TESTING.
  METHODS add2 FOR TESTING.
  METHODS small_sum1 FOR TESTING.
  METHODS small_sum2 FOR TESTING.
  METHODS sum0 FOR TESTING.

  METHODS diff0 FOR TESTING.
  METHODS quotient0 FOR TESTING.
  METHODS remainder0 FOR TESTING.
  METHODS large_sum FOR TESTING.
  METHODS sub1 FOR TESTING.
  METHODS mul1 FOR TESTING.
  METHODS small_product1 FOR TESTING.
  METHODS zero_product FOR TESTING.
  METHODS div1 FOR TESTING.
  METHODS small_quotient1 FOR TESTING.
  METHODS small_remainder1 FOR TESTING.
  METHODS mod1 FOR TESTING.
  METHODS expt1 FOR TESTING.
  METHODS pow0 FOR TESTING.
ENDCLASS.

CLASS ltc_bigint IMPLEMENTATION.

METHOD setup.
  mo_int1 = NEW lcl_lisp_bigintx( )->set_str( val1 ).
  mo_int2 = NEW lcl_lisp_bigintx( )->set_str( val2 ).
  mv_2_pow_1000 =
  `10715086071862673209484250490600018105614048117055336074437503883703510` &
  `51124936122493198378815695858127594672917553146825187145285692314043598` &
  `45775746985748039345677748242309854210746050623711418779541821530464749` &&
  `83581941267398767559165543946077062914571196477686542167660429831652624` &
  `386837205668069376`.

ENDMETHOD.

METHOD teardown.
  CLEAR mo_int1.
  CLEAR mo_int2.
ENDMETHOD.

METHOD from_string1.
  cl_abap_unit_assert=>assert_equals( exp = val1
                                      act = mo_int1->to_str( with_sign = abap_false )
                                      msg = 'Fill First BigInt with set_str( )' ).
ENDMETHOD.

METHOD from_string2.
  cl_abap_unit_assert=>assert_equals( exp = val2
                                      act = mo_int2->to_str( with_sign = abap_false )
                                      msg = 'Fill Second BigInt with set_str( )' ).
ENDMETHOD.

METHOD from_float1.
  DATA lv_float1 TYPE lcl_lisp_bigintx=>tv_chunk.
  lv_float1 = val1.
  cl_abap_unit_assert=>assert_equals( exp = val1
                                      act = mo_int1->set_float( lv_float1 )->to_str( with_sign = abap_false )
                                      msg = 'Fill First BigInt with set_float( )' ).
ENDMETHOD.

METHOD from_float2.
  DATA lv_float2 TYPE lcl_lisp_bigintx=>tv_chunk.
  lv_float2 = val2.
  cl_abap_unit_assert=>assert_equals( exp = val2
                                      act = mo_int2->set_float( lv_float2 )->to_str( with_sign = abap_false )
                                      msg = 'Fill Second BigInt with set_float( )' ).
ENDMETHOD.

METHOD small_sum1.
  mo_int1->set_str( '55' ).
  mo_int2->set_str( '2' ).
  DATA(lv_act) = mo_int1->add( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+57'
                                      act = lv_act
                                      msg = 'Error BigInt Small Sum 1' ).
ENDMETHOD.

METHOD small_sum2.
  mo_int1->set_str( '-2' ).
  mo_int2->set_str( '55' ).
  DATA(lv_act) = mo_int1->add( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+53'
                                      act = lv_act
                                      msg = 'Error BigInt Small Sum 2' ).
ENDMETHOD.

METHOD sum0.
  mo_int1->set_str( '123456789123456789123456789123456789123456789123456789' ).
  mo_int2->set_str( '456789123456789123456789123456789123456789123456789' ).
  DATA(lv_act) = mo_int1->add( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+123913578246913578246913578246913578246913578246913578'
                                      act = lv_act
                                      msg = 'Error BigInt Sum 0' ).
ENDMETHOD.

METHOD diff0.
  mo_int1->set_str( '123456789123456789123456789123456789123456789123456789' ).
  mo_int2->set_str( '456789123456789123456789123456789123456789123456789' ).
  DATA(lv_act) = mo_int1->sub( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+123000000000000000000000000000000000000000000000000000'
                                      act = lv_act
                                      msg = 'Error BigInt Diff 0' ).
ENDMETHOD.

METHOD add1.
  mo_int1->set_str( '12345678' ).
  mo_int2->set_str( '22223333' ).
  DATA(lv_act) = mo_int1->add( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+34569011'
                                      act = lv_act
                                      msg = 'Error BigInt Addition 2' ).
ENDMETHOD.

METHOD add2.
  DATA(lv_act) = mo_int1->add( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+6584389567626857340110'
                                      act = lv_act
                                      msg = 'Error BigInt Addition 1' ).
ENDMETHOD.

METHOD large_sum.
  " Data from Project Euler Problem 13
  DATA lt_data TYPE string_table.
  lt_data = VALUE #(
( `37107287533902102798797998220837590246510135740250` )
( `46376937677490009712648124896970078050417018260538` )
( `74324986199524741059474233309513058123726617309629` )
( `91942213363574161572522430563301811072406154908250` )
( `23067588207539346171171980310421047513778063246676` )
( `89261670696623633820136378418383684178734361726757` )
( `28112879812849979408065481931592621691275889832738` )
( `44274228917432520321923589422876796487670272189318` )
( `47451445736001306439091167216856844588711603153276` )
( `70386486105843025439939619828917593665686757934951` )
( `62176457141856560629502157223196586755079324193331` )
( `64906352462741904929101432445813822663347944758178` )
( `92575867718337217661963751590579239728245598838407` )
( `58203565325359399008402633568948830189458628227828` )
( `80181199384826282014278194139940567587151170094390` )
( `35398664372827112653829987240784473053190104293586` )
( `86515506006295864861532075273371959191420517255829` )
( `71693888707715466499115593487603532921714970056938` )
( `54370070576826684624621495650076471787294438377604` )
( `53282654108756828443191190634694037855217779295145` )
( `36123272525000296071075082563815656710885258350721` )
( `45876576172410976447339110607218265236877223636045` )
( `17423706905851860660448207621209813287860733969412` )
( `81142660418086830619328460811191061556940512689692` )
( `51934325451728388641918047049293215058642563049483` )
( `62467221648435076201727918039944693004732956340691` )
( `15732444386908125794514089057706229429197107928209` )
( `55037687525678773091862540744969844508330393682126` )
( `18336384825330154686196124348767681297534375946515` )
( `80386287592878490201521685554828717201219257766954` )
( `78182833757993103614740356856449095527097864797581` )
( `16726320100436897842553539920931837441497806860984` )
( `48403098129077791799088218795327364475675590848030` )
( `87086987551392711854517078544161852424320693150332` )
( `59959406895756536782107074926966537676326235447210` )
( `69793950679652694742597709739166693763042633987085` )
( `41052684708299085211399427365734116182760315001271` )
( `65378607361501080857009149939512557028198746004375` )
( `35829035317434717326932123578154982629742552737307` )
( `94953759765105305946966067683156574377167401875275` )
( `88902802571733229619176668713819931811048770190271` )
( `25267680276078003013678680992525463401061632866526` )
( `36270218540497705585629946580636237993140746255962` )
( `24074486908231174977792365466257246923322810917141` )
( `91430288197103288597806669760892938638285025333403` )
( `34413065578016127815921815005561868836468420090470` )
( `23053081172816430487623791969842487255036638784583` )
( `11487696932154902810424020138335124462181441773470` )
( `63783299490636259666498587618221225225512486764533` )
( `67720186971698544312419572409913959008952310058822` )
( `95548255300263520781532296796249481641953868218774` )
( `76085327132285723110424803456124867697064507995236` )
( `37774242535411291684276865538926205024910326572967` )
( `23701913275725675285653248258265463092207058596522` )
( `29798860272258331913126375147341994889534765745501` )
( `18495701454879288984856827726077713721403798879715` )
( `38298203783031473527721580348144513491373226651381` )
( `34829543829199918180278916522431027392251122869539` )
( `40957953066405232632538044100059654939159879593635` )
( `29746152185502371307642255121183693803580388584903` )
( `41698116222072977186158236678424689157993532961922` )
( `62467957194401269043877107275048102390895523597457` )
( `23189706772547915061505504953922979530901129967519` )
( `86188088225875314529584099251203829009407770775672` )
( `11306739708304724483816533873502340845647058077308` )
( `82959174767140363198008187129011875491310547126581` )
( `97623331044818386269515456334926366572897563400500` )
( `42846280183517070527831839425882145521227251250327` )
( `55121603546981200581762165212827652751691296897789` )
( `32238195734329339946437501907836945765883352399886` )
( `75506164965184775180738168837861091527357929701337` )
( `62177842752192623401942399639168044983993173312731` )
( `32924185707147349566916674687634660915035914677504` )
( `99518671430235219628894890102423325116913619626622` )
( `73267460800591547471830798392868535206946944540724` )
( `76841822524674417161514036427982273348055556214818` )
( `97142617910342598647204516893989422179826088076852` )
( `87783646182799346313767754307809363333018982642090` )
( `10848802521674670883215120185883543223812876952786` )
( `71329612474782464538636993009049310363619763878039` )
( `62184073572399794223406235393808339651327408011116` )
( `66627891981488087797941876876144230030984490851411` )
( `60661826293682836764744779239180335110989069790714` )
( `85786944089552990653640447425576083659976645795096` )
( `66024396409905389607120198219976047599490197230297` )
( `64913982680032973156037120041377903785566085089252` )
( `16730939319872750275468906903707539413042652315011` )
( `94809377245048795150954100921645863754710598436791` )
( `78639167021187492431995700641917969777599028300699` )
( `15368713711936614952811305876380278410754449733078` )
( `40789923115535562561142322423255033685442488917353` )
( `44889911501440648020369068063960672322193204149535` )
( `41503128880339536053299340368006977710650566631954` )
( `81234880673210146739058568557934581403627822703280` )
( `82616570773948327592232845941706525094512325230608` )
( `22918802058777319719839450180888072429661980811197` )
( `77158542502016545090413245809786882778948721859617` )
( `72107838435069186155435662884062257473692284509516` )
( `20849603980134001723930671666823555245252804609722` )
( `53503534226472524250874054075591789781264330331690` ) ).

  mo_int1->set_str( lt_data[ 1 ]  ).
  LOOP AT lt_data FROM 2 INTO DATA(lv_value).
    mo_int1->add( mo_int2->set_str( lv_value ) ).
  ENDLOOP.
  DATA(lv_act) = mo_int1->to_str( ).
  lv_act = lv_act+0(15).
  cl_abap_unit_assert=>assert_equals( exp = '+55373762303908'
                                      act = lv_act
                                      msg = 'Error BigInt Large Sum' ).
ENDMETHOD.

METHOD sub1.
  DATA(lv_act) = mo_int1->sub( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+6584388500955746317888'
                                      act = lv_act
                                      msg = 'Error BigInt Substraction 1' ).
ENDMETHOD.

METHOD small_product1.
  mo_int1->set_str( '55' ).
  mo_int2->set_str( '2' ).
  DATA(lv_act) = mo_int1->mul( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+110'
                                      act = lv_act
                                      msg = 'Error BigInt Small Product 1' ).
ENDMETHOD.

METHOD zero_product.
  mo_int1->set( mo_int1->zero ).
  mo_int2->set( mo_int1->zero ).
  DATA(lv_act) = mo_int1->mul( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+0'
                                      act = lv_act
                                      msg = 'Error BigInt 0 x 0 Product' ).
ENDMETHOD.

METHOD mul1.
  DATA(lv_act) = mo_int1->mul( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+3511688783305019156347358328566507889'
                                      act = lv_act
                                      msg = 'Error BigInt Multiplikation 1' ).
ENDMETHOD.

METHOD div1.
  DATA(lv_act) = mo_int1->div( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+12345678'
                                      act = lv_act
                                      msg = 'Error BigInt Division 1' ).
ENDMETHOD.


METHOD small_quotient1.
  mo_int1->set_str( '55' ).
  mo_int2->set_str( '2' ).
  DATA(lv_act) = mo_int1->div( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+27'
                                      act = lv_act
                                      msg = 'Error BigInt Quotient 1' ).
ENDMETHOD.

METHOD mod1.
  DATA(lv_act) = mo_int1->mod( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+741'
                                      act = lv_act
                                      msg = 'Error BigInt Modulo 1' ).
ENDMETHOD.

METHOD quotient0.
  mo_int1->set_str( '123456789123456789123456789123456789123456789123456789' ).
  mo_int2->set_str( '456789123456789123456789123456789123456789123456789' ).
  DATA(lv_act) = mo_int1->div( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+270'
                                      act = lv_act
                                      msg = 'Error BigInt Quotient 0' ).
ENDMETHOD.

METHOD remainder0.
  mo_int1->set_str( '123456789123456789123456789123456789123456789123456789' ).
  mo_int2->set_str( '456789123456789123456789123456789123456789123456789' ).
  DATA(lv_act) = mo_int1->mod( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+123725790123725790123725790123725790123725790123759'
                                      act = lv_act
                                      msg = 'Error BigInt Remainder 0' ).
ENDMETHOD.

METHOD small_remainder1.
  mo_int1->set_str( '55' ).
  mo_int2->set_str( '2' ).
  DATA(lv_act) = mo_int1->mod( mo_int2 )->to_str( ).
  cl_abap_unit_assert=>assert_equals( exp = '+1'
                                      act = lv_act
                                      msg = 'Error BigInt Small Remainder 1' ).
ENDMETHOD.

METHOD expt1.
  DATA char TYPE c.

  mo_int1->set_str( '2' ).
  mo_int2->set_str( '1000' ).
  DATA(lv_act) = mo_int1->pow( mo_int2 )->to_str( abap_false ).

  cl_abap_unit_assert=>assert_equals( exp = mv_2_pow_1000
                                      act = lv_act
                                      msg = 'Error 2^1000 Exp.' ).

  cl_abap_unit_assert=>assert_equals( exp = '302'
                                      act = mo_int1->number_of_digits( )
                                      msg = 'Error number_of_digits( )' ).
  " Sum of digits
  mo_int1->set_str( '0' ).
  DATA(lv_index) = 0.
  DO strlen( mv_2_pow_1000 ) TIMES.
    char = mv_2_pow_1000+lv_index.
    lv_index = lv_index + 1.
    mo_int1->add( mo_int2->set_int( CONV #( char ) ) ).
  ENDDO.

  cl_abap_unit_assert=>assert_equals( exp = '+1366'
                                      act = mo_int1->to_str( )
                                      msg = 'Error 2^1000 Exp. Checksum' ).
ENDMETHOD.

METHOD pow0.
  CONSTANTS:
    c_result01 TYPE string VALUE
                 `1312725713289421237657843980595598424100266696530400720719151219406787764897588432940359346053328407334163402775242984806318132` &
    `0336916399717322191011656518219293737025185070167780299467452009047810737631840284735067047016660440221140008269086688024693453`,
    c_result02 TYPE string VALUE
                 `2442276391559784291564062313082029766885760594092333943963232427278562239072295905162355933123690756125602609450619828822313823` &
    `99806118223789091673723133181586581363181643653509353651524178429997303854335309088679972576198276700682406094675136785739754655`,
    c_result03 TYPE string VALUE
                 `153996261726474457848071090172109765869311183988837414192146600913045303371108329887290556608539989465608547813608623273730216` &
    `144041388542019007690902642265481445622484722263648557949791584213306299398488082844430519334934996626354068858406944866555917275`,
    c_result04 TYPE string VALUE
                 `2794226395276202103149159507756342164408561334078103987219709613779963256918086031952371760963188443103591043568800900286669697` &
    `88862574647785057366029838313516558807781677624075086836424616215372727998170718311496546765495011531101026177861934796133272621`,
    c_result05 TYPE string VALUE
                 `4165262104856477522382322149241768178714221301493786449320330791506742611925063569292780131668961720159352372922457756993048460` &
    `55616161511820226963579072268665008163747692987162430909000075023036102538774159435898765447606088589116078199120014900157956743`,
    c_result06 TYPE string VALUE
                 `0605229078294646100031278160630528251289794710098442137839721201316222013946236923785610597677334865248957562362952756684115350` &
    `57786853130435376621445126759225054562258189320885372588982770338678241145363584929356985875352175648324297877313571098582565205`,
    c_result07 TYPE string VALUE
                 `40040874273280221580466183194208923501103308541693329777308517061160534559824887478763213041178250838577258360811503424133676947` &
    `1204671563150424470129794401557321309361610468809883808771105102078864750631004444766938117993461065676711689834575218679963130`,
    c_result08 TYPE string VALUE
                 `3465947935223422988180529653137091031551496067225327678877290012691976753117816645754678660307007043931910676920066259164085421` &
    `59839270947787856114345910950215048910943282766650028771973534181865461358919688069768884586487828562229846254948815690586358498`,
    c_result09 TYPE string VALUE
                 `39010347163207841080633876539491573565677545150067792707083414582485332032969516735651475423614788253581154728892111331682057795` &
    `3849489114235148916097963332083100793806106415535750369535137210395194787726943623080428717168781177232669971513779370989696664`,
    c_result10 TYPE string VALUE
                 `719109333200203606265648469590962649809863461955640234704502517791511742216871604984248036056549`.

  mo_int1->set_str( '123456789123456789123456789123456789123456789123456789' ).
  mo_int2->set_str( '45' ).
  DATA(lv_act) = mo_int1->pow( mo_int2 )->to_str( ).

  DATA(lv_exp) = c_result01 && c_result02 && c_result03 && c_result04 && c_result05 && c_result06 && c_result07 &&
                    c_result08 && c_result09 && c_result10.
  cl_abap_unit_assert=>assert_equals( exp = lv_exp
                                      act = mo_int1->to_str( abap_false )
                                      msg = 'Error BigInt Pow 0' ).

  cl_abap_unit_assert=>assert_equals( exp = strlen( lv_exp )
                                      act = mo_int1->number_of_digits( )
                                      msg = 'Error BigInt Digits Pow 0' ).
ENDMETHOD.

ENDCLASS.
